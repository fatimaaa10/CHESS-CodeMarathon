----------------VIEWS-------------------------------------

--1.Create a view named PlayerRankings that lists all players with their full name (first name and last name combined)
--, country, and current world ranking, sorted by their world ranking in ascending order.

CREATE VIEW PlayerRankings AS
SELECT
    first_name || ' ' || last_name AS full_name,
    country,
    current_world_ranking
FROM Players
ORDER BY current_world_ranking ASC;

--Query to see the view PlayerRankings =  (SELECT * FROM PlayerRankings;)


--2.Create a view named MatchResults that shows the details of each match, including the match date, 
--the names of the players (both player1 and player2), and the name of the winner. 
--If the match is yet to be completed, the winner should be displayed as 'TBD'.

CREATE VIEW MatchResults AS
SELECT
    m.match_date,
    p1.first_name || ' ' || p1.last_name AS player1_name,
    p2.first_name || ' ' || p2.last_name AS player2_name,
    COALESCE(winner.first_name || ' ' || winner.last_name, 'TBD') AS winner_name
FROM Matches m
JOIN Players p1 ON m.player1_id = p1.player_id
JOIN Players p2 ON m.player2_id = p2.player_id
LEFT JOIN Players winner ON m.winner_id = winner.player_id;

--Query to see the view MatchResults =  (SELECT * FROM MatchResults);


--3.Create a view named SponsorSummary that shows each sponsor's name, the total number of players they sponsor, 
--and the total amount of sponsorship provided by them.

CREATE VIEW SponsorSummary AS
SELECT
    s.sponsor_name,
    COUNT(ps.player_id) AS total_players_sponsored,
    SUM(ps.sponsorship_amount) AS total_amount
FROM Sponsors s
JOIN Player_Sponsors ps ON s.sponsor_id = ps.sponsor_id
GROUP BY s.sponsor_name;

--Query to see the view SponsorSummary =  (SELECT * FROM SponsorSummary);

--4.Create a view named ActiveSponsorships that lists the active sponsorships 
--(where the contract end date is in the future). The view should include the playerâ€™s full name, 
--sponsor name, and sponsorship amount. Ensure the view allows updates to the sponsorship amount.

CREATE VIEW ActiveSponsorships AS
SELECT 
     p.first_name || ' ' || p.last_name AS Full_Name,
    s.sponsor_name,
    sp.sponsorship_amount
FROM Player_Sponsors sp
JOIN Players p ON sp.player_id = p.player_id
JOIN Sponsors s ON sp.sponsor_id = s.sponsor_id
WHERE sp.contract_end_date > CURRENT_DATE;


--Query to see the view ActiveSponsorships =  (SELECT * FROM ActiveSponsorships);

--5.Create a view named PlayerPerformanceSummary that provides a detailed summary of each player's performance 
--in the chess tournament. The view should include the following columns:

SELECT 
    CONCAT(p.first_name,' ',p.last_name) AS Player_Name,
    p.total_matches_played AS Total_Matches_Played,
    COUNT(m.winner_id) AS Total_Wins,
    ROUND((COUNT(m.winner_id) * 100.0) / p.total_matches_played, 4) AS Win_Percentage,
    CASE 
        WHEN National > International THEN 'National'
        WHEN International > National THEN 'International'
        WHEN National = International THEN 'Balanced'
        ELSE NULL
    END AS Best_Match_Level
FROM Players p
LEFT JOIN Matches m ON p.player_id = m.winner_id
LEFT JOIN (
    SELECT 
        winner_id,
        COUNT(CASE WHEN match_level = 'National' THEN 1 END) AS National,
        COUNT(CASE WHEN match_level = 'International' THEN 1 END) AS International
    FROM Matches
    GROUP BY winner_id
) mt ON p.player_id = mt.winner_id
GROUP BY p.player_id, p.first_name, p.last_name, p.total_matches_played, National, International
ORDER BY Win_Percentage DESC;